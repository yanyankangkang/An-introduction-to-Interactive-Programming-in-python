# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH  = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos = [WIDTH/2, HEIGHT/2]
ball_vel = [0,0]
ZERO = 0  	
paddle1_pos =  HEIGHT / 2 - 1
paddle2_pos =  HEIGHT / 2 - 1
paddle1_vel = 0
paddle2_vel = 0
score1 = 0
score2 = 0 
paddle1_dir = 0
paddle2_dir = 0
# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH/2, HEIGHT/2]
    if direction == RIGHT:
       ball_vel[0] = random.randrange(120, 240)/60
       ball_vel[1] = -random.randrange(60, 180)/60
    else:
       ball_vel[0] = -random.randrange(120, 240)/60
       ball_vel[1] = -random.randrange(60, 180)/60
   

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    spawn_ball(RIGHT)
    paddle1_pos =  HEIGHT / 2 - 1
    paddle2_pos =  HEIGHT / 2 - 1
    score1 = 0
    score2 = 0 
    
def Bound(flag):
    if flag == 0:
        if(ball_pos[1] >= paddle1_pos - HALF_PAD_HEIGHT) and (ball_pos[1] < paddle1_pos + HALF_PAD_HEIGHT):
            return True
        else:
            return False
    else :
        if(ball_pos[1] >= paddle2_pos - HALF_PAD_HEIGHT) and (ball_pos[1] < paddle2_pos + HALF_PAD_HEIGHT):
            return True
        else:
            return False

def Success():
   global ball_vel
   ball_vel[0] = -ball_vel[0]  
   ball_vel[0] *= 1.1
   ball_vel[1] *= 1.1 
    
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel
    Border_Right = WIDTH - PAD_WIDTH
    Border_Left  = PAD_WIDTH
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0] 
    ball_pos[1] += ball_vel[1]
    if (ball_pos[1] <= BALL_RADIUS) or (ball_pos[1] > HEIGHT - 1 - BALL_RADIUS):
            ball_vel[1] = -ball_vel[1]
    if ball_pos[0] <= Border_Left + BALL_RADIUS:
        if Bound(0):
            Success()
           # ball_vel[1] -= 2 * paddle1_dir
        else:
            score2 += 1 
            spawn_ball(RIGHT)
    if ball_pos[0] > Border_Right - 1 - BALL_RADIUS: 
        if Bound(1):
            Success()
         #   ball_vel[1] -= 2 * paddle2_dir
        else:
            score1 += 1  
            spawn_ball(LEFT)
            
    
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, 'White','White')
    # update paddle's vertical position, keep paddle on the screen
    if (paddle1_pos + paddle1_vel > HALF_PAD_HEIGHT) and (paddle1_pos + paddle1_vel < HEIGHT  - HALF_PAD_HEIGHT): 
            paddle1_pos += paddle1_vel
    if (paddle2_pos + paddle2_vel > HALF_PAD_HEIGHT) and (paddle2_pos + paddle2_vel < HEIGHT  - HALF_PAD_HEIGHT):
            paddle2_pos += paddle2_vel
    # draw paddles
    Rectangle1 = [(ZERO, paddle1_pos - PAD_HEIGHT/2),
                  (PAD_WIDTH, paddle1_pos - PAD_HEIGHT/2),
                  (PAD_WIDTH, paddle1_pos + PAD_HEIGHT/2), 
                  (ZERO, paddle1_pos + PAD_HEIGHT/2)]
    Rectangle2 = [(WIDTH - PAD_WIDTH - 1, paddle2_pos - PAD_HEIGHT/2), 
                  (WIDTH - 1, paddle2_pos - PAD_HEIGHT/2),
                  (WIDTH - 1, paddle2_pos + PAD_HEIGHT/2),
                  (WIDTH - PAD_WIDTH - 1, paddle2_pos + PAD_HEIGHT/2)]
    canvas.draw_polygon(Rectangle1, 2, 'White','White')  
    canvas.draw_polygon(Rectangle2, 2, 'White','White') 
    # draw scores
    canvas.draw_text(str(score1), (190, 100), 52, 'Red')
    canvas.draw_text(str(score2), (390, 100), 52, 'Red')

def keydown(key):
     global paddle1_vel, paddle2_vel
     if key == simplegui.KEY_MAP["up"]:
            paddle2_vel = -4
            paddle2_dir = -1
     if key == simplegui.KEY_MAP["down"]:
            paddle2_vel = 4
            paddle2_dir = 1
     if key == simplegui.KEY_MAP["w"]:
            paddle1_vel = -4
            paddle1_dir = -1
     if key == simplegui.KEY_MAP["s"]:
            paddle1_vel = 4
            paddle1_dir = 1

def keyup(key):
     global paddle1_vel, paddle2_vel
     if key == simplegui.KEY_MAP["up"]:
            paddle2_vel = 0
            paddle2_dir = 0
     if key == simplegui.KEY_MAP["down"]:
            paddle2_vel = 0
            paddle2_dir = 0
     if key == simplegui.KEY_MAP["w"]:
            paddle1_vel = 0
            paddle1_dir = 0
     if key == simplegui.KEY_MAP["s"]:
            paddle1_vel = 0
            paddle1_dir = 0

def button_handler():
    new_game()
                    
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
button1 = frame.add_button('Restart', button_handler)

# start frame
new_game()
frame.start()
